@page "/Login"
@layout LoginLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<div class="login-container">
    @if (isSignup)
    {
        <h2>Sign up</h2>

        @if (!string.IsNullOrEmpty(signupResponse.Secret))
        {
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenFormField Text="帳號" Style="width: 100%;">
                    <RadzenTextBox Style="width: 100%" @bind-Value=login.Account />
                </RadzenFormField>
                <img id="qrcode" src="@($"data:image/png;base64,{Convert.ToBase64String(signupResponse.QrCode)}")" style="width: 200px; height: 200px; display: block; margin: 0 auto;" />
                <RadzenSecurityCode @bind-Value=@login.Password Count="6" Gap="10" Type="SecurityCodeType.Numeric" />
            </RadzenStack>
            <br />
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenButton Click=@(args => HandleSignup()) Text="註冊" ButtonStyle="ButtonStyle.Success" />
@*                 <RadzenButton Click=@(args => isSignup = false) Text="登錄" ButtonStyle="ButtonStyle.Info" /> *@
            </RadzenStack>
        }
    }
    else
    {
        <h2>Login</h2>
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenFormField Text="帳號" Style="width: 100%;">
                <RadzenTextBox Style="width: 100%" @bind-Value=login.Account />
            </RadzenFormField>
            <RadzenSecurityCode @bind-Value=@login.Password Count="6" Gap="10" Type="SecurityCodeType.Numeric" />
        </RadzenStack>
        <br />
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenButton Click=@(args => HandleLogin()) Text="Login" ButtonStyle="ButtonStyle.Success" />
           @*  <RadzenButton Click=@(args => HandleInitSignup()) Text="註冊" ButtonStyle="ButtonStyle.Info" /> *@
        </RadzenStack>
    }

    <br />

    <RadzenLabel Text="Login"/>
    <RadzenSwitch @bind-Value=@value Change=@(args => OnSwitchChange(args)) />
    <RadzenLabel Text="Sign up"/>
</div>

@code {
    private bool isSignup { get; set; } = false;
    private bool value { get; set; } = false;

    private SignupResponse signupResponse = new SignupResponse()
    {
        Secret = "",
        QrCode = new byte[0]
    };

    private SignupRequest signup = new SignupRequest()
    {
        Account = "",
        Password = "",
        Secret = ""
    };

    private LoginModelRequest login = new LoginModelRequest()
    {
        Account = "",
        Password = ""
    };

    private async Task OnSwitchChange(bool? value)
    {
        if (value is true)
        {
            await this.HandleInitSignup();
        }
        else
        {
            isSignup = false;
        }
    }

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("Auth/Login", this.login);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var result = System.Text.Json.JsonSerializer.Deserialize<LoginModelResponse>(content, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            
            LoginUserInfo loginUserInfo = new LoginUserInfo()
            {
                UserName = this.login.Account,
                AccessToken = result.Token,
                RefreshToken = result.Token,
                ExpiresAt = DateTime.Now.AddMinutes(30)
            };
            
            var customAuthStateProvider = (CustomAuthStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateState(loginUserInfo);
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleInitSignup()
    {
        var response = await Http.GetFromJsonAsync<SignupResponse>("Auth/Signup");

        if (response != null)
        {
            signupResponse = response;
            isSignup = true;
        }
        else
        {
            isSignup = false;
        }
    }

    private async Task HandleSignup()
    {
        this.signup.Secret = signupResponse.Secret;
        var response = await Http.PostAsJsonAsync("Auth/Signup", this.signup);
    }
}