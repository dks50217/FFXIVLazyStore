@page "/"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<PageTitle>Home</PageTitle>

@if (store.products != null)
{
    @foreach (var productRow in store.products.Chunk(3))
    {
        <RadzenRow>
            @foreach (var product in productRow)
            {
                <RadzenColumn>
                    <RadzenCard class="rz-my-12 rz-mx-auto card-hover" Style="width: 420px; height: 200px;" @onclick="() =>HandleProductClick(product)">
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-4">
                            <RadzenImage Path="@product.ThumbnailUrl" Style="width: 100px; height: 100px;" />
                            <RadzenStack Gap="0">
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Product Name</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@(product.Name)</b></RadzenText>
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Price</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@(product.PriceText)</b></RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenColumn>
            }
        </RadzenRow>
    }
}

@code {
    private StoreVM store = new StoreVM();
    private int offset = 0;
    private int limit = 40;
    private bool isInitialized = false;
    private DotNetObjectReference<Home> objRef;
    private string scrollMessage = "尚未滾動到底部";

    protected override async Task OnInitializedAsync()
    {
        if (store.products == null)
        {
            store.products = new List<Product>();
            await LoadProducts();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await jsRuntime.InvokeVoidAsync("initScrollDetection", objRef, "scrollableContent");
        }
    }

    private async Task HandleProductClick(Product product)
    {
        var url = $"https://store.finalfantasyxiv.com/ffxivstore/en-us/product/{product.Id}";
        await jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    [JSInvokable]
    public async Task LoadProducts()
    {
        var requestUri = $"https://api.store.finalfantasyxiv.com/ffxivcatalog/api/products/?lang=en-us&currency=USD&limit={limit}&offset={offset}";
        var result = await httpClient.GetFromJsonAsync<StoreVM>(requestUri);
        if (result != null && result.products != null)
        {
            store.products?.AddRange(result.products);
            offset += 40;
        }
    }

    [JSInvokable]
    public async Task OnScrollToBottom()
    {
        scrollMessage = $"已滾動到底部！時間：{DateTime.Now:HH:mm:ss}";

        var requestUri = $"https://api.store.finalfantasyxiv.com/ffxivcatalog/api/products/?lang=en-us&currency=USD&limit={limit}&offset={offset}";
        var result = await httpClient.GetFromJsonAsync<StoreVM>(requestUri);
        if (result != null && result.products != null)
        {
            store.products?.AddRange(result.products);
            offset += 40;
        }
        
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await jsRuntime.InvokeVoidAsync("removeScrollListener", "scrollableContent");
        objRef?.Dispose();
    }
}

<style scoped>
    .rz-card {
        cursor : pointer;
    }

    .card-hover {
        transition: box-shadow 0.3s ease-in-out;
    }

    .card-hover:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
</style>


<script>
    window.initScrollDetection = (dotnetHelper, elementId) => {
        const element = document.getElementById(elementId);
        element.addEventListener('scroll', () => {
            if (element.scrollHeight - element.scrollTop === element.clientHeight) {
                dotnetHelper.invokeMethodAsync('OnScrollToBottom');
            }
        });
    };

    window.removeScrollListener = (elementId) => {
        const element = document.getElementById(elementId);
        element.removeEventListener('scroll', null);
    };
</script>